#include <bits/stdc++.h>

using namespace std;


#define endl '\n'
#define ll long long
#define f first
#define s second
#define pb push_back
#define all(x) x.begin(), x.end()


const int INF = 2e9;
int n;
bitset <32> k;
bitset <32> last_num = 0;
vector <bitset <32> > ans, arr0, arr1;


void solve(int ind, bool last) {
    vector <bitset <32> > arr;
    if (arr0.size() > arr1.size())
        arr = arr0;
    else
        arr = arr1;

    arr0.clear(); arr0.reserve(n);
    arr1.clear(); arr1.reserve(n);

    for (int i = 0; i < arr.size(); i++) {
        if (arr[i][ind] == 1)
            arr1.push_back(arr[i]);
        else
            arr0.push_back(arr[i]);
    }
    if (arr0.empty() || arr1.empty())
        return;

    if (arr0.size() < arr1.size()) {
        ans.push_back(arr0[0]);
        last_num = arr1[0];
    }
    else {
        ans.push_back(arr1[0]);
        last_num = arr0[0];
    }

    if (last)
        ans.push_back(last_num);
}


signed main() {/*
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);*/

    int k_int;
    cin >> n >> k_int;
    k = k_int;

    map <int, int> mp;

    arr0.resize(n);
    for (int i = 0, v; i < n; i++) {
        cin >> v;
        arr0[i] = v;
        mp[v] = i + 1;
    }
    for (int i = 31; i >= 0; i--) {
        solve(i, k[i] == 1);
        if (k[i])
            break;
    }
    if (ans.size() <= 1) {
        cout << -1;
        return 0;
    }

    cout << ans.size() << endl;
    for (int i = 0, v; i < ans.size(); i++) {
        v = 0;
        for (int j = 0, k = 1; j < 32; j++) {
            if (ans[i][j])
                v += k;
            k *= 2;
        }
        cout << mp[v] << ' ';
    }
}
